# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

jobs:

- job: 'Linux'
  displayName: 'Linux'

  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.X'
      architecture: 'x64'

  - script: |
      python -m pip install --upgrade pip
      python -m pip install numpy psutil ninja cmake scikit-build
    displayName: 'Install build dependencies'

  - script: |
      python setup.py clean
      python -m pip install .
      python blosc/test.py
    displayName: 'Test'

  - script: |
      docker pull dockcross/manylinux1-x64
      docker run dockcross/manylinux1-x64 > ./dockcross-manylinux-x64
      chmod +x ./dockcross-manylinux-x64
      ./dockcross-manylinux-x64 ./.build_wheels_in_manylinux.sh
    displayName: 'Build wheel'

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'LinuxWheels'
      targetPath: './dist'

- job: 'macOS'
  displayName: 'macOS'

  pool:
    vmImage: 'macos-10.14'

  strategy:
    matrix:
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
      Python38:
        python.version: '3.8'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: |
      python -m pip install --upgrade pip
      python -m pip install numpy psutil ninja cmake scikit-build delocate
    displayName: 'Install build dependencies'

  - script: |
      python setup.py clean
      python setup.py bdist_wheel \
        --build-type Release \
        --plat-name macosx-10.9-x86_64 \
        -G Ninja -- \
        -DCMAKE_OSX_DEPLOYMENT_TARGET:STRING=10.9 \
        -DCMAKE_OSX_ARCHITECTURES:STRING=x86_64
      delocate-listdeps ./dist/*.whl
      delocate-wheel ./dist/*.whl
    displayName: 'Build wheel'

  - script: |
      python -m pip install blosc --force-reinstall --no-index --no-cache-dir -f ./dist/
      python blosc/test.py
    displayName: 'Test wheel'

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'MacWheel$(python.version)'
      targetPath: './dist'

- job: 'Windows'
  displayName: 'Windows'

  pool:
    vmImage: 'vs2017-win2016'

  strategy:
    matrix:
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
      Python38:
        python.version: '3.8'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: |
      python -m pip install --upgrade pip
      python -m pip install numpy psutil ninja cmake scikit-build
    displayName: 'Install build dependencies'

  - script: |
      call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
      set CC=cl.exe
      set CXX=cl.exe
      python setup.py bdist_wheel --build-type Release -G Ninja
    displayName: 'Build wheel'

  - script: |
      python -m pip install blosc --force-reinstall --no-index --no-cache-dir -f ./dist/
      python blosc/test.py
    displayName: 'Test wheel'

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'Windows$(python.version)'
      targetPath: './dist'
